// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectCardPark1.Data;

#nullable disable

namespace ProjectCardPark1.Migrations
{
    [DbContext(typeof(ProjectCardPark1Context))]
    [Migration("20250209125203_UpdateListingReserve")]
    partial class UpdateListingReserve
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "5181efe8-31de-47f0-860f-e514d04102e5",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectCardPark1.Data.ProjectCardPark1User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "567918c3-6626-487d-8fb4-e9109ad162de",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRQEy5eB+orADzDtivOlGQgTpHnDXV6+B5CRRdtAyWjC94s5x/EBffP9o0+nE9jtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "642020a1-159d-4a46-ba75-4c73cf1bc71d",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff128ec1-c2d7-4f70-bc54-69ded57e8ed9",
                            Email = "amostan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amos",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMOSTAN@GMAIL.COM",
                            NormalizedUserName = "AMOSTAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMAJ9k0UiBxCJ+kkW/Q4H4tlKvc8KT6+nHuvH6nNmkVyR8W1zvYd/yAUGs5Dcn3WWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e431a2c-5191-4092-8721-0ac1288bb775",
                            TwoFactorEnabled = false,
                            UserName = "amostan@gmail.com"
                        },
                        new
                        {
                            Id = "5181efe8-31de-47f0-860f-e514d04102e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2a7facd-79ac-4a49-b57d-535de58e2aa5",
                            Email = "davidlee@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIDLEE@GMAIL.COM",
                            NormalizedUserName = "DAVIDLEE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkRFyiy+eX2tRoXqQRwEJqvG25ycADCVPhPdtBJmCb/Wk+JbtwdhSceog50L0nzAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58fd892f-ff65-4b3b-95a2-6004dba26fbe",
                            TwoFactorEnabled = false,
                            UserName = "davidlee@gmail.com"
                        });
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9160),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9171),
                            Name = "Vanguard",
                            Type = "unknown",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9174),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9174),
                            Name = "Pokemon",
                            Type = "unknown",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9176),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9177),
                            Name = "Hololive",
                            Type = "WhoKnows",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9178),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 488, DateTimeKind.Local).AddTicks(9179),
                            Name = "Others",
                            Type = "WhoKnows",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ListingImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ListingImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool?>("Reserved")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sold")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Listing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1,
                            CategoryId = 3,
                            CategoryName = "Hololive",
                            CreatedBy = "5181efe8-31de-47f0-860f-e514d04102e5",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5715),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5735),
                            Description = "Suisei Oshi Card",
                            ListingId = 3,
                            ListingImageUrl = "/Card_Images/Card_1.png",
                            Name = "Suisei OSR",
                            Price = 3.0,
                            Reserved = false,
                            UpdatedBy = "5181efe8-31de-47f0-860f-e514d04102e5",
                            UserId = 3,
                            UserName = "David"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3,
                            CategoryId = 3,
                            CategoryName = "Hololive",
                            CreatedBy = "5181efe8-31de-47f0-860f-e514d04102e5",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5740),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5741),
                            Description = "Ina Card WAH!",
                            ListingId = 3,
                            ListingImageUrl = "/Card_Images/Card_2.png",
                            Name = "Ina Card",
                            Price = 1.0,
                            Reserved = false,
                            UpdatedBy = "5181efe8-31de-47f0-860f-e514d04102e5",
                            UserId = 3,
                            UserName = "David"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1,
                            CategoryId = 3,
                            CategoryName = "Hololive",
                            CreatedBy = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5743),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5744),
                            Description = "Kiara Rare Card!!!",
                            ListingId = 3,
                            ListingImageUrl = "/Card_Images/Card_3.png",
                            Name = "Kiara Oshi Card",
                            Price = 350.0,
                            Reserved = false,
                            UpdatedBy = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            UserId = 2,
                            UserName = "Amos"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 5,
                            CategoryId = 2,
                            CategoryName = "Pokemon",
                            CreatedBy = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5746),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5747),
                            Description = "Its an Eevee",
                            ListingId = 2,
                            ListingImageUrl = "/Card_Images/Card_4.png",
                            Name = "Eevee Card",
                            Price = 10.0,
                            Reserved = false,
                            UpdatedBy = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            UserId = 2,
                            UserName = "Amos"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 1,
                            CategoryId = 1,
                            CategoryName = "Vanguard",
                            CreatedBy = "5181efe8-31de-47f0-860f-e514d04102e5",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5749),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5750),
                            Description = "YOUTHBERK",
                            ListingId = 5,
                            ListingImageUrl = "/Card_Images/Card_5.png",
                            Name = "YOUTHBERK",
                            Price = 30.0,
                            Reserved = false,
                            UpdatedBy = "5181efe8-31de-47f0-860f-e514d04102e5",
                            UserId = 3,
                            UserName = "David"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 2,
                            CategoryId = 1,
                            CategoryName = "Vanguard",
                            CreatedBy = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            DateCreated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5752),
                            DateUpdated = new DateTime(2025, 2, 9, 20, 52, 2, 642, DateTimeKind.Local).AddTicks(5752),
                            Description = "Shojodoji dojo yo",
                            ListingId = 6,
                            ListingImageUrl = "/Card_Images/Card_6.png",
                            Name = "Shojodoji",
                            Price = 5.0,
                            Reserved = false,
                            UpdatedBy = "4181efe7-66dc-47f0-860f-e506d04102e5",
                            UserId = 2,
                            UserName = "Amos"
                        });
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Stars")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Contact")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoRatings")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<double>("Stars")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Nil",
                            Contact = 889988123,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@localhost.com",
                            ListingId = 1,
                            Name = "Admin",
                            NoRatings = 0,
                            RatingId = 3,
                            Stars = 0.0,
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nil",
                            Contact = 889988124,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amostan@gmail.com",
                            ListingId = 2,
                            Name = "Amos",
                            NoRatings = 0,
                            RatingId = 4,
                            Stars = 0.0,
                            UserId = "4181efe7-66dc-47f0-860f-e506d04102e5"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Nil",
                            Contact = 889988125,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "davidlee@gmail.com",
                            ListingId = 3,
                            Name = "David",
                            NoRatings = 0,
                            RatingId = 5,
                            Stars = 0.0,
                            UserId = "5181efe8-31de-47f0-860f-e514d04102e5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectCardPark1.Data.ProjectCardPark1User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectCardPark1.Data.ProjectCardPark1User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectCardPark1.Data.ProjectCardPark1User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectCardPark1.Data.ProjectCardPark1User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Listing", b =>
                {
                    b.HasOne("ProjectCardPark1.Domain.Category", "Category")
                        .WithMany("Listing")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectCardPark1.Domain.User", "User")
                        .WithMany("Listing")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Payment", b =>
                {
                    b.HasOne("ProjectCardPark1.Domain.Listing", "Listing")
                        .WithOne("Payment")
                        .HasForeignKey("ProjectCardPark1.Domain.Payment", "ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectCardPark1.Domain.User", "User")
                        .WithMany("Payment")
                        .HasForeignKey("UserId");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Rating", b =>
                {
                    b.HasOne("ProjectCardPark1.Domain.User", "User")
                        .WithMany("Rating")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Report", b =>
                {
                    b.HasOne("ProjectCardPark1.Domain.Listing", "Listing")
                        .WithMany("Report")
                        .HasForeignKey("ListingId");

                    b.HasOne("ProjectCardPark1.Domain.User", "User")
                        .WithMany("Report")
                        .HasForeignKey("UserId");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Category", b =>
                {
                    b.Navigation("Listing");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.Listing", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ProjectCardPark1.Domain.User", b =>
                {
                    b.Navigation("Listing");

                    b.Navigation("Payment");

                    b.Navigation("Rating");

                    b.Navigation("Report");
                });
#pragma warning restore 612, 618
        }
    }
}
