@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProjectCardPark1.Data
@using ProjectCardPark1.Domain
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer

@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject UserManager<ProjectCardPark1User> UserManager
@inject IUserStore<ProjectCardPark1User> UserStore
@inject SignInManager<ProjectCardPark1User> SignInManager
@inject IEmailSender<ProjectCardPark1User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Register</PageTitle>

<h1 class="heading-cardparc ">CardParc</h1>

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="register-container ">
        <h1 class="registertext">Join us in Card Trading!</h1>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control"
                           autocomplete="firstname" aria-required="true" placeholder="Bill" />
                <label for="email">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3 ">
                <InputText @bind-Value="Input.LastName" class="form-control"
                           autocomplete="lastname" aria-required="true" placeholder="Gates" />
                <label for="email">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- UserId Field -->
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label>
                <InputNumber id="userid" @bind-Value="User.UserId" class="form-control" />
                <ValidationMessage For="() => User.UserId" class="text-danger" />
            </div>

            <!-- Name Field -->
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="User.Name" class="form-control" />
                <ValidationMessage For="() => User.Name" class="text-danger" />
            </div>

            <!-- Address Field -->
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label>
                <InputText id="address" @bind-Value="User.Address" class="form-control" />
                <ValidationMessage For="() => User.Address" class="text-danger" />
            </div>

            <!-- Contact Field -->
            <div class="mb-3">
                <label for="contact" class="form-label">Contact:</label>
                <InputNumber id="contact" @bind-Value="User.Contact" class="form-control" />
                <ValidationMessage For="() => User.Contact" class="text-danger" />
            </div>

            <!-- Stars Field -->
            <div class="mb-3">
                <label for="stars" class="form-label">Stars:</label>
                <InputNumber id="stars" @bind-Value="User.Stars" class="form-control" />
                <ValidationMessage For="() => User.Stars" class="text-danger" />
            </div>

            <!-- RatingId Field -->
            <div class="mb-3">
                <label for="ratingid" class="form-label">RatingId:</label>
                <InputNumber id="ratingid" @bind-Value="User.RatingId" class="form-control" />
                <ValidationMessage For="() => User.RatingId" class="text-danger" />
            </div>

            <!-- ListingId Field -->
            <div class="mb-3">
                <label for="listingid" class="form-label">ListingId:</label>
                <InputNumber id="listingid" @bind-Value="User.ListingId" class="form-control" />
                <ValidationMessage For="() => User.ListingId" class="text-danger" />
            </div>

            <!-- DateCreated Field -->
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label>
                <InputDate id="datecreated" @bind-Value="User.DateCreated" class="form-control" />
                <ValidationMessage For="() => User.DateCreated" class="text-danger" />
            </div>

            <!-- DateUpdated Field -->
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label>
                <InputDate id="dateupdated" @bind-Value="User.DateUpdated" class="form-control" />
                <ValidationMessage For="() => User.DateUpdated" class="text-danger" />
            </div>

            <!-- CreatedBy Field -->
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label>
                <InputText id="createdby" @bind-Value="User.CreatedBy" class="form-control" />
                <ValidationMessage For="() => User.CreatedBy" class="text-danger" />
            </div>

            <!-- UpdatedBy Field -->
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label>
                <InputText id="updatedby" @bind-Value="User.UpdatedBy" class="form-control" />
                <ValidationMessage For="() => User.UpdatedBy" class="text-danger" />
            </div>

            <!-- Profile Image Upload -->
            <div class="mb-3">
                <label for="profileimage" class="form-label">Profile Image:</label>
                <InputFile id="profileimage" OnChange="HandleFileSelection" accept="image/*" class="form-control" />
                <ValidationMessage For="() => User.ProfileImage" class="text-danger" />
            </div>
            <div class="col-md-6">
                <img src="@imgSrc" width="200" height="200" style="border: 1px solid #000000; margin-top: 10px;" />
            </div>
            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        //create the user role if it doesn't exist
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }

        //add the user to the user role
        await UserManager.AddToRoleAsync(user, "User");
        //add the user id as claim when user registers
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId",
        user.Id));

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ProjectCardPark1User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ProjectCardPark1User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ProjectCardPark1User)}'. " +
                $"Ensure that '{nameof(ProjectCardPark1User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ProjectCardPark1User> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ProjectCardPark1User>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";
        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
    string? Error_msg;
    string imgSrc = ""; // Base64 string for image preview
    byte[] _fileBytes = null; // Byte array for the uploaded image

    [SupplyParameterFromForm]
    private User User { get; set; } = new();



    // Handle file selection for profile image
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Read the file into a byte array
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(ms);
                _fileBytes = ms.ToArray();
                imgSrc = $"data:{file.ContentType};base64,{Convert.ToBase64String(_fileBytes)}";
            }
        }
    }


    // Add a new user to the database
    private async Task AddUser()
    {
        Console.WriteLine("AddUser method called!");
        try
        {
            var user = new User
                {
                    UserId = User.UserId,
                    Name = User.Name,
                    Address = User.Address,
                    Contact = User.Contact,
                    Stars = User.Stars,
                    RatingId = User.RatingId,
                    ListingId = User.ListingId,
                    ProfileImage = _fileBytes,
                    ProfileImageUrl = imgSrc,
                    DateCreated = DateTime.Now,
                    DateUpdated = DateTime.Now,
                    CreatedBy = "System",
                    UpdatedBy = "System"
                };

            using var context = DbFactory.CreateDbContext();
            context.User.Add(user);
            await context.SaveChangesAsync();

            NavigationManager.NavigateTo("/users");

            _fileBytes = null;
            imgSrc = ""; // Clear the image preview
        }
        catch (Exception ex)
        {
            Error_msg = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}