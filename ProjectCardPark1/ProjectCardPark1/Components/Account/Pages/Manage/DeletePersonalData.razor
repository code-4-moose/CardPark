@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using ProjectCardPark1.Data
@using ProjectCardPark1.Domain
@inject ProjectCardPark1.Service.SharedService SharedService

@inject UserManager<ProjectCardPark1User> UserManager
@inject SignInManager<ProjectCardPark1User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@message" />

<h3>Delete Personal Data</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        @if (requirePassword)
        {
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
        }
        <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ProjectCardPark1User user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private User User;

    private string UserId;

    private List<Listing> Listings = new List<Listing>();

    private List<Rating> Ratings = new List<Rating>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        user = await UserManager.GetUserAsync(claimsPrincipal);

        UserId = UserManager.GetUserId(claimsPrincipal);

        User = await context.User.FirstOrDefaultAsync(m => m.UserId == UserId);
    }

    private async Task OnValidSubmitAsync()
    {

        using var context = DbFactory.CreateDbContext();

        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Error: Incorrect password.";
            return;
        }

        var Listing = await context.Listing.ToListAsync();
        var Rating = await context.Rating.ToListAsync();
        var Report = await context.Report.ToListAsync();
        if (Listing != null)
        {
            foreach (var list in Listing)
            {
                if (list.UserId == User.Id)
                {
                    context.Listing.Remove(list);
                }
            }
        }
        if (Rating != null)
        {
            foreach (var rate in Rating)
            {
                if (rate.UserId == User.Id)
                {
                    context.Rating.Remove(rate);
                }
                if (rate.CreatedBy == User.UserId)
                {
                    context.Rating.Remove(rate);
                }
            }
        }
        if (Report != null)
        {

            foreach (var rep in Report)
            {
                if (rep.UserId == User.Id)
                {
                    context.Report.Remove(rep);
                }
            }
        }

        if (User != null)
        {
            context.User.Remove(User!);
        }

        await context.SaveChangesAsync();

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        await context.SaveChangesAsync();

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
