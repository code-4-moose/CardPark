@page "/Account/Manage"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ProjectCardPark1.Data
@using ProjectCardPark1.Service
@using ProjectCardPark1.Domain
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ProjectCardPark1User> UserManager
@inject SignInManager<ProjectCardPark1User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ProjectCardPark1.Service.SharedService SharedService
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />
<div class="row">
    <div class="col-md-6">
        @* <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Email</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm> *@
        <br/>
        <button onclick="location.href='/UpdateImage?msg=@userId';" class="w-100 btn btn-lg btn-primary">Change Profile Picture</button>
        <button onclick="location.href='/EditProfile';" class="w-100 btn btn-lg btn-primary">Change Profile Information</button>
        <a href=($"EditProfile?id={User.Id}")>Edit</a>
        @*<a href="/UpdateImage?msg=@userId" class="button-style">Go to Page 2 with Dynamic Query String Data</a> *@
    </div>
</div>
<p>@userId</p>
<script src="_content/Solutaris.InfoWARE.ProtectedBrowserStorage/config.js"></script>


@code {
    private ProjectCardPark1User user = default!;
    private string? username;
    private string? phoneNumber;
    string? userId;
    int USERID;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromForm]
    private User User { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        using var context = DbFactory.CreateDbContext();

        userId = UserManager.GetUserId(claimsPrincipal);

        User ??= await context.User.FirstOrDefaultAsync(m => m.UserId == userId);
        user = await UserManager.GetUserAsync(claimsPrincipal);

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        

        USERID = User.Id;
        // SharedService.ShareUserId = userId;

        // localStorage.SetItem("userId", userId);

        Input.PhoneNumber ??= phoneNumber;
    }
    private async Task updateProfile()
    {
        NavigationManager.NavigateTo($"/users/edit");
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }
    private string getuserId()
    {
        return "USER ID : " + SharedService.ShareUserId;
    }
    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
