@page "/UpdateImage"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager
@using ProjectCardPark1.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ProjectCardPark1User> UserManager
@inject SignInManager<ProjectCardPark1User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject SharedService shareUserId

<PageTitle>Create</PageTitle>

<h1>Update Profile Image</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="UpdateProfileImage" FormName="update" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Profile Image Upload -->
            <div class="mb-3">
                <label for="profileimage" class="form-label">Profile Image:</label>
                <InputFile id="profileimage" OnChange="HandleFileSelection" accept="image/*" class="form-control" />
                <ValidationMessage For="() => User.ProfileImage" class="text-danger" />
            </div>

            <!-- Image Preview -->
            <div class="col-md-6">
                <img src="@imgSrc" width="200" height="200" style="border: 1px solid #000000; margin-top: 10px;" />
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary">Update Profile Image</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

<script src="_content/BlazorInputFile/BlazorInputFile.js"></script>

@code {
    private ProjectCardPark1User user = default!;
    private string? userid;

    string imgSrc = ""; // Base64 string for image preview
    byte[] _fileBytes = null; // Byte array for the uploaded image

    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // Handle file selection for profile image
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Read the file into a byte array
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(ms);
                _fileBytes = ms.ToArray();
                imgSrc = $"data:{file.ContentType};base64,{Convert.ToBase64String(_fileBytes)}";
            }
        }
    }
    
    // Update the profile image and URL for an existing user
    private async Task UpdateProfileImage()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            // Fetch the existing user from the database
            var existingUser = await context.User.FirstOrDefaultAsync(u => u.Id == User.Id); // Replace `User.Id` with the actual unique identifier for the user

            if (existingUser != null)
            {
                // Update only the ProfileImage and ProfileImageUrl fields
                existingUser.ProfileImage = _fileBytes;
                existingUser.ProfileImageUrl = imgSrc;

                // Save the changes to the database
                await context.SaveChangesAsync();

                _fileBytes = null;
                imgSrc = ""; // Clear the image preview
            }
            else
            {
                Console.WriteLine("User not found!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}