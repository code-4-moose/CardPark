@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager
@inject ProjectCardPark1.IService.IUserService userService
@using ProjectCardPark1.Data
@using ProjectCardPark1.PageClass

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label> 
                <InputNumber id="userid" @bind-Value="User.UserId" class="form-control" /> 
                <ValidationMessage For="() => User.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="User.Name" class="form-control" /> 
                <ValidationMessage For="() => User.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label> 
                <InputText id="address" @bind-Value="User.Address" class="form-control" /> 
                <ValidationMessage For="() => User.Address" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="contact" class="form-label">Contact:</label> 
                <InputNumber id="contact" @bind-Value="User.Contact" class="form-control" /> 
                <ValidationMessage For="() => User.Contact" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="stars" class="form-label">Stars:</label> 
                <InputNumber id="stars" @bind-Value="User.Stars" class="form-control" /> 
                <ValidationMessage For="() => User.Stars" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="ratingid" class="form-label">RatingId:</label> 
                <InputNumber id="ratingid" @bind-Value="User.RatingId" class="form-control" /> 
                <ValidationMessage For="() => User.RatingId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="listingid" class="form-label">ListingId:</label> 
                <InputNumber id="listingid" @bind-Value="User.ListingId" class="form-control" /> 
                <ValidationMessage For="() => User.ListingId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="User.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => User.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="User.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => User.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="User.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => User.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="User.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => User.UpdatedBy" class="text-danger" /> 
            </div>        
            <div class="row">
                <div class="col-md-2">
                    <label> Photo: </label>
                </div>
                <div class="col-md-10">
                    <InputFile OnChange="HandleFileSelection" />
                </div>
            </div>
            <button @onclick="SaveStudent" class="btn btn-primary" style="width:100% ;margin-top:10px;"> Save </button>
            <button @onclick="ReadStudent" class="btn btn-danger" style="width:100% ;margin-top:10px;"> Read </button>

            <div class="col-md-6">
                <img src="@imgSrc" width="200" height="200" style="border: 1px solid #000000; margin-top: 10px;" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();
    
    string imgSrc = "";
    string Message = "";
    byte[] _fileBytes = null;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        using var context = DbFactory.CreateDbContext();

        context.User.Add(User);
        await context.SaveChangesAsync();

        imgSrc = "";
        NavigationManager.NavigateTo("/users");
    }
    public void SaveStudent()
    {
        UserPage studentPage = new UserPage(userService);
        Message = studentPage.SaveInformations(_fileBytes, User);

        User = new User();
        imgSrc = "";
    }
    public void ReadStudent()
    {
        UserPage studentPage = new UserPage(userService);
        User = studentPage.GetSavedUser();

        imgSrc = User.ProfileImageUrl;
        Message = "";
    }
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File; // Access the uploaded file
        if (file != null)
        {
            // Read the file contents into a byte array
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(ms); // Read the file stream
                _fileBytes = ms.ToArray();
            }

            // Process the file (e.g., generate a Base64 string for an image)
            var base64String = Convert.ToBase64String(_fileBytes);

            // Assuming StudentPage.GetImage processes and returns a byte array
            UserPage studentPage = new UserPage(userService);
            var photo = studentPage.GetImage(base64String);

            // Convert the processed image back to a Base64 string for display
            imgSrc = $"data:image/jpg;base64,{Convert.ToBase64String(photo)}";
        }
    }
}
