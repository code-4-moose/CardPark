@page "/listings/create"
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject NavigationManager NavigationManager
@using ProjectCardPark1.Data
@inject UserManager<ProjectCardPark1User> UserManager
@inject ProjectCardPark1.Components.Account.IdentityUserAccessor UserAccessor
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject AuthenticationStateProvider authenticationStateProvider

@attribute [Authorize(Roles = "User")]

<PageTitle>Create</PageTitle>
@if (User == null)
{
    <p>@userId</p>
    <p>Your Account has been banned</p>
}
else
{
<div class="listing">
    <h1>Add Listing</h1>
    <hr />
    <div class="row">
        @if (imgSrc == "")
        {
            <img src="/add_image.png" class="card-img" />
        }
        else
        {
            <img src="@imgSrc" class="card-img" />
        }
        <div class="col-md-4">
            <EditForm method="post" Model="Listing" OnValidSubmit="AddListing" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <label for="profileimage" class="form-label">Item Image:</label>
                    <InputFile id="profileimage" OnChange="HandleFileSelection" accept="image/*" class="form-control" />
                    <ValidationMessage For="() => Listing.ListingImage" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Listing.Name" class="form-control" />
                    <ValidationMessage For="() => Listing.Name" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="listingid" class="form-label">ListingId:</label> 
                    <InputNumber id="listingid" @bind-Value="Listing.ListingId" class="form-control" /> 
                    <ValidationMessage For="() => Listing.ListingId" class="text-danger" /> 
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label> 
                    <InputNumber id="price" @bind-Value="Listing.Price" class="form-control" /> 
                    <ValidationMessage For="() => Listing.Price" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label> 
                    <InputNumber id="amount" @bind-Value="Listing.Amount" class="form-control" /> 
                    <ValidationMessage For="() => Listing.Amount" class="text-danger" /> 
                </div>        
                @*                 <div class="mb-3" hidden>
                    <label for="userid" class="form-label">UserId:</label> 
                    <InputNumber id="userid" @bind-Value="userId" class="form-control" /> 
                    <ValidationMessage For="() => Listing.UserId" class="text-danger" /> 
                </div>     *@    
                <div class="mb-3">
                    <label for="categoryid" class="form-label">Category:</label> 
                    <InputSelect id="categoryid" @bind-Value="Listing.CategoryId" class="form-control"> 
                        @if (Categories != null)
                        {
                            foreach  (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    </InputSelect>
                </div>            
                <div class="mb-3">
                    <label for="price" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Listing.Description" class="form-control" />
                    <ValidationMessage For="() => Listing.Description" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="datecreated" class="form-label">DateCreated:</label> 
                    <InputDate id="datecreated" @bind-Value="Listing.DateCreated" class="form-control" /> 
                    <ValidationMessage For="() => Listing.DateCreated" class="text-danger" /> 
                </div>        
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">DateUpdated:</label> 
                    <InputDate id="dateupdated" @bind-Value="Listing.DateUpdated" class="form-control" /> 
                    <ValidationMessage For="() => Listing.DateUpdated" class="text-danger" /> 
                </div>        
                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy:</label> 
                    <InputText id="createdby" @bind-Value="Listing.CreatedBy" class="form-control" /> 
                    <ValidationMessage For="() => Listing.CreatedBy" class="text-danger" /> 
                </div>        
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label> 
                    <InputText id="updatedby" @bind-Value="Listing.UpdatedBy" class="form-control" /> 
                    <ValidationMessage For="() => Listing.UpdatedBy" class="text-danger" /> 
                </div>        
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
</div>
}

<script src="_content/BlazorInputFile/BlazorInputFile.js"></script>

@code {
    string imgSrc = ""; // Base64 string for image preview
    byte[] _fileBytes = null; // Byte array for the uploaded image
    private string userId;
    // private ProjectCardPark1Context context = default!;
    private IList<Category> Categories;

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new();

    [SupplyParameterFromForm]
    private Listing Listing { get; set; } = new();

    [SupplyParameterFromForm]
    private User? User { get; set; }

    string? categoryName;
    protected override async void OnInitialized()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        using var context = DbFactory.CreateDbContext();
        // Get the userId claim
        Categories = context.Category.ToList();

        userId = UserManager.GetUserId(claimsPrincipal);
        User = await context.User.FirstOrDefaultAsync(m => m.UserId == userId);

        Listing.UserId = User.Id;
        Listing.UserName = User.Name;
    }
    private string GetCategoryName(int categoryId)
    {
        var selectedCategory = Categories.FirstOrDefault(c => c.Id == categoryId);
        return selectedCategory?.Name ?? string.Empty; // Return the category name or an empty string if not found
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddListing()
    {
        Listing.CategoryName = GetCategoryName(Listing.CategoryId);

        Listing.CreatedBy = userId;
        Listing.UpdatedBy = userId;
        Listing.DateCreated = DateTime.Now;
        Listing.DateUpdated = DateTime.Now;
        Listing.Reserved = false;
        //CHANGES

        using var context = DbFactory.CreateDbContext();

        context.Listing.Add(Listing);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/listings/complete");
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Read the file into a byte array
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(ms); //10 MB
                _fileBytes = ms.ToArray();
                imgSrc = $"data:{file.ContentType};base64,{Convert.ToBase64String(_fileBytes)}";
                Listing.ListingImage = _fileBytes;
                Listing.ListingImageUrl = imgSrc;
            }
        }
    }
}
