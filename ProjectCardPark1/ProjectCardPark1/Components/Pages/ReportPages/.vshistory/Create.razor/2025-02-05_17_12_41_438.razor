@page "/reports/create"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@using Microsoft.AspNetCore.Identity

@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject UserManager<ProjectCardPark1User> UserManager



<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Report</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Report" OnValidSubmit="AddReport" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Report.Description" class="form-control" /> 
                <ValidationMessage For="() => Report.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="listingid" class="form-label">ListingId:</label> 
                <InputNumber id="listingid" @bind-Value="Report.ListingId" class="form-control" /> 
                <ValidationMessage For="() => Report.ListingId" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="userid" class="form-label">UserId:</label> 
                <InputNumber id="userid" @bind-Value="Report.UserId" class="form-control" /> 
                <ValidationMessage For="() => Report.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Report.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Report.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Report.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Report.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Report.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Report.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Report.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Report.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/reports">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Report Report { get; set; } = new();

    [SupplyParameterFromQuery(Name = "listingid")]
    private int listingId { get; set; }

    [SupplyParameterFromForm]
    private User User { get; set; }

    private string? userid;

    private ProjectCardPark1Context context = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        userid = UserManager.GetUserId(claimsPrincipal);

        context = DbFactory.CreateDbContext();

        User ??= await context.User.FirstOrDefaultAsync(m => m.UserId == userid);


        Report.UserId = userid;


    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddReport()
    {
        using var context = DbFactory.CreateDbContext();
        context.Report.Add(Report);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reports");
    }
}
