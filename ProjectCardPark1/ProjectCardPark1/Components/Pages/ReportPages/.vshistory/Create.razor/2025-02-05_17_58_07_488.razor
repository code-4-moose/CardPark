@page "/reports/create"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@using Microsoft.AspNetCore.Identity

@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject UserManager<ProjectCardPark1User> UserManager
<style>
    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease;
        width: 25%;
        position: relative;
        left: 20%;
        padding: 10px;
    }

    .card-image {
        text-align: center;
        padding: 16px;
    }
      .whole {
         width: 100%;
         height: 100%;
         padding: 20px; 
         display:flex; 
         gap: 20px; 
     } 
    .desc_box {
        background-color: white;
        position: relative;
        left: 20%;
        top: 20%;
        width: 100%;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 5px;
    }
</style>
<div class="whole">

    @if (Listing != null)
    {
        <div class="card">
            <div class="card-header text-white bg-primary">
                <h3 class="text-center">Reported Listing</h3>
            </div>
            <div class="card-image">
                @if (!string.IsNullOrEmpty(Listing.ListingImageUrl))
                {
                    <div class="image-wrapper">
                        <img src="@Listing.ListingImageUrl" alt="@Listing.Name" class="card-img" style="height: 150px; width: 150px;" />
                    </div>
                }
                else
                {
                    <img src="./no-image.jpg" style="width: 150px; height: 150px;" />
                }
            </div>
            <div class="card-content">
                <h3>@Listing.Name</h3>
                <p><strong>Price:</strong> @Listing.Price</p>
                <p><strong>Amount:</strong> @Listing.Amount</p>
                <p><strong>Description:</strong> @Listing.Description</p>
                <p><strong>Username: </strong><a href="/Account/OtherProfile?userid=@Listing.CreatedBy" target="_blank" rel="noopener noreferrer"> @Listing.UserName</a></p>
                <p><strong>Category:</strong> @Listing.CategoryName</p>
            </div>
        </div>
        
        <EditForm method="post" Model="Report" OnValidSubmit="AddReport" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="desc_box">
                <label for="description" class="form-label">Reason:</label>
                <textarea id="description"
                          @bind="Report.Description"
                          class="form-control description-box"
                          rows="15"
                          maxlength="500">
                </textarea>
                <ValidationMessage For="() => Report.Description" class="text-danger" /> 
            </div>    
            <p>@listingId</p>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    }
</div>
@code {
    [SupplyParameterFromForm]
    private Report Report { get; set; } = new();

    [SupplyParameterFromQuery(Name = "listingid")]
    private int listingId { get; set; }

    [SupplyParameterFromForm]
    private User User { get; set; }

    [SupplyParameterFromForm]
    private Listing Listing { get; set; }

    private string? userid;

    private ProjectCardPark1Context context = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        userid = UserManager.GetUserId(claimsPrincipal);

        context = DbFactory.CreateDbContext();

        User ??= await context.User.FirstOrDefaultAsync(m => m.UserId == userid);

        Listing = await context.Listing.FirstOrDefaultAsync(l => l.Id == listingId);

    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddReport()
    {
        using var context = DbFactory.CreateDbContext();
        Report.DateCreated = DateTime.Now;
        Report.DateUpdated = DateTime.Now;
        Report.CreatedBy = User.Name;
        Report.UpdatedBy = User.Name;
        Report.UserId = User.Id;
        Report.ListingId = listingId;
        context.Report.Add(Report);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reports");
    }
}
