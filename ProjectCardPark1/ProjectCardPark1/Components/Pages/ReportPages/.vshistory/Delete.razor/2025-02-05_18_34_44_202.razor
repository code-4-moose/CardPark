@page "/reports/delete"
@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator")]


<PageTitle>Delete</PageTitle>

<style>
    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease;
        width: 25%;
        position: relative;
        left: 40%;
        padding: 10px;
    }

    .card-image {
        text-align: center;
        padding: 16px;
    }
</style>
    @if (report is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
    <div class="whole">
        <div class="card">
            <div class="card-header text-white bg-danger">
                <h3 class="text-center">Reported Listing</h3>
            </div>
            <div class="card-image">
                @if (!string.IsNullOrEmpty(listing.ListingImageUrl))
                {
                    <div class="image-wrapper">
                        <img src="@listing.ListingImageUrl" alt="@listing.Name" class="card-img" style="height: 150px; width: 150px;" />
                        <div class="hover-overlay">
                        </div>
                    </div>
                }
                else
                {
                    <img src="./no-image.jpg" style="width: 150px; height: 150px;" />
                }
            </div>

            <div class="card-content">
                <h3>@listing.Name</h3>
                <p><strong>Price:</strong> @listing.Price</p>
                <p><strong>Amount:</strong> @listing.Amount</p>
                <p><strong>Description:</strong> @listing.Description</p>
                <p><strong>Username: </strong><a href="/Account/OtherProfile?userid=@listing.CreatedBy" target="_blank" rel="noopener noreferrer"> @listing.UserName</a></p>
                <p><strong>Category:</strong> @listing.CategoryName</p>
            </div>

        </div>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@report.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ListingId</dt>
            <dd class="col-sm-10">@report.ListingId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@report.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@report.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@report.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10"><a href="/Account/OtherProfile?userid=@report.UserId" target="_blank" rel="noopener noreferrer">@report.CreatedBy</a></dd>
        </dl>
        <EditForm method="post" Model="report" OnValidSubmit="DeleteReport" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(report is null)">Delete</button> |
            <a href="/reports">Back to List</a>
        </EditForm>
    </div>
    }
    

@code {
    private Report? report;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Listing? listing { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        report = await context.Report.FirstOrDefaultAsync(m => m.Id == Id);

        listing = await context.Listing.FirstOrDefaultAsync(l => l.Id == report.ListingId);

        User = await context.User.FirstOrDefaultAsync(l => l.Id == report.UserId);

        if (report is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteReport()
    {
        using var context = DbFactory.CreateDbContext();
        context.Report.Remove(report!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reports");
    }
}
