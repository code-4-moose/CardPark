@page "/ratings/User"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using ProjectCardPark1.Domain
@using ProjectCardPark1.Data
@using Microsoft.AspNetCore.Identity

@implements IAsyncDisposable

@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<ProjectCardPark1User> UserManager

@attribute [Authorize(Roles = "User")]

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="card">
        <div class="card-header text-white bg-primary">
            <h2 class="text-center">Ratings</h2>
        </div>
        <div class="card-body">
            @foreach (var review in ListRatings)
            {
                <div class="review-card">
                    <div class="review-header">
                        <h4 class="reviewer-name">@review.ReviewerName</h4>
                        <span class="review-rating">
                            @review.Stars ⭐
                        </span>
                    </div>
                    <p class="review-text">@review.Description</p>
                    <small class="review-date">@review.DateCreated.ToString("MMMM dd, yyyy")</small>
                    <button href=@($"/ratings/edit?id={review.Id}")> Edit Description </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ProjectCardPark1Context context = default!;

    private List<Rating> ListRatings = new List<Rating>();

    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        // var AllRatings = await context.Rating.ToListAsync();
        context = DbFactory.CreateDbContext();

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        userId = UserManager.GetUserId(claimsPrincipal);

        ListRatings = await context.Rating
        .OrderByDescending(r => r.DateCreated)
        .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
