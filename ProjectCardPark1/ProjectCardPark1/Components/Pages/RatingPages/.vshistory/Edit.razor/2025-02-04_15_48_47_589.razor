@page "/ratings/edit"
@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Rating</h2>
<hr />
@if (Rating is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body>
    <div class="card">
        <div class="card-content">
            <h3>@listing.Name</h3>
            <p><strong>Price:</strong> $@listing.Price</p>
            <p><strong>Amount:</strong> @listing.Amount</p>
            <p><strong>Description:</strong> @listing.Description</p>
            <p><strong>Username:</strong><a href="/Account/OtherProfile?userid=@listing.CreatedBy"> @listing.UserName</a></p>
            <p><strong>Category:</strong> @listing.CategoryName</p>
        </div>
    </div>
    </body>
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Rating" OnValidSubmit="UpdateRating" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Rating.Id" value="@Rating.Id" />
                <div class="mb-3" hidden>
                    <label for="ratingid" class="form-label">RatingId:</label>
                    <InputNumber id="ratingid" @bind-Value="Rating.RatingId" class="form-control" />
                    <ValidationMessage For="() => Rating.RatingId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Rating.Description" class="form-control" />
                    <ValidationMessage For="() => Rating.Description" class="text-danger" />
                </div>
                <div class="mb-3" hidden >
                    <label for="stars" class="form-label">Stars:</label>
                    <InputNumber id="stars" @bind-Value="Rating.Stars" class="form-control" />
                    <ValidationMessage For="() => Rating.Stars" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="userid" class="form-label">UserId:</label>
                    <InputNumber id="userid" @bind-Value="Rating.UserId" class="form-control" />
                    <ValidationMessage For="() => Rating.UserId" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Rating.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Rating.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Rating.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Rating.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Rating.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Rating.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Rating.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Rating.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a class="btn-custom btn-delete mx-1" href="/ratings/User">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Rating? Rating { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }

    [SupplyParameterFromForm]
    private Listing? Listing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();


        Rating ??= await context.Rating.FirstOrDefaultAsync(m => m.Id == Id);



        if (Rating is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRating()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Rating!).State = EntityState.Modified;

        try
        {
            Rating.DateUpdated = DateTime.Now;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RatingExists(Rating!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/ratings");
    }

    private bool RatingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Rating.Any(e => e.Id == id);
    }
}
