@page "/ratings/edit"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Edit</PageTitle>

<style>
    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease;
        width:25%;
        position:relative;
        left:20%;
        top:30%;
        padding: 10px;
    }

    .card-image {
        text-align: center;
        padding: 16px;
    }

    .image-wrapper {
        position: relative;
        display: inline-block;
    }

        .image-wrapper:hover .card-img {
            transform: scale(1.05); /* Slight zoom-in effect */
        }

        .image-wrapper:hover .hover-overlay {
            opacity: 1;
        }

    .hover-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        transform: scale(1.05);
        border-radius: 5px;
        pointer-events: none; /* Ensure hover events only trigger on the wrapper */
    }

        .hover-overlay i {
            color: white;
            font-size: 24px;
        }
    .desc_box{
        background-color:white;

        position:absolute;
        left:48%;
        top:30%;

        width:40%;
        
        padding:20px;

        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

        margin-bottom:10px;
    }
    .save-btn-position{
        position:relative;
        left:90%;
        margin-top:10px;
    }

    .back-btn-position{
        position: relative;
        left: 0%;
        top:0%;
    }

    .btn-custom {
        padding: 8px 14px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: bold;
        text-transform: uppercase;
        text-decoration: none;
        display: inline-block;
        background-color: lightslategrey;
        color:white;
    }

    .btn-custom:hover {
        transform: translateY(-1px); /* Slight lift effect */
        color:white;
    }

    .rating_pos{
        width:30%;
        position:relative;
        left:80%;
    }
    .desc_pos{
        position:absolute;
        top:7%;
    }
</style>
<a class="btn-custom back-btn-position" href="/ratings/User">Back to List</a>
<br />
<br />
<br />
@if (Rating is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header text-white bg-primary">
            <h3 class="text-center">Rated Listing</h3>
        </div>
        <div class="card-image" @onclick="() => ShowImage(imgSrc)">
            @if (!string.IsNullOrEmpty(listing.ListingImageUrl))
            {
                <div class="image-wrapper">
                    <img src="@listing.ListingImageUrl" alt="@listing.Name" class="card-img" style="height: 150px; width: 150px;" />
                    <div class="hover-overlay">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </div>
                </div>
            }
            else
            {
                <img src="./no-image.jpg" style="width: 150px; height: 150px;" />
            }
        </div>
        <div class="card-content">
            <h3>@listing.Name</h3>
            <p><strong>Price:</strong> @listing.Price</p>
            <p><strong>Amount:</strong> @listing.Amount</p>
            <p><strong>Description:</strong> @listing.Description</p>
            <p><strong>Username: </strong><a href="/Account/OtherProfile?userid=@listing.CreatedBy" target="_blank" rel="noopener noreferrer"> @listing.UserName</a></p>
            <p><strong>Category:</strong> @listing.CategoryName</p>
        </div>
        @if (listing.Sold != true)
        {
            <button onclick="location.href='/listings/edit?id=@listing.Id';" class="w-100 btn btn-lg btn-primary">Change Listing Information</button>
        }
    </div>
    <div class="desc_box">
        <h3 class="rating_pos">@ratingMSG ⭐</h3>
            <EditForm method="post" Model="Rating" OnValidSubmit="UpdateRating" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
            <h4 class="desc_pos">Description: </h4>
            <textarea id="description"
                      @bind="Rating.Description"
                      class="form-control description-box"
                      placeholder="Enter a detailed description..."
                      rows="4"
                      maxlength="500">
                    </textarea>
            <ValidationMessage For="() => Rating.Description" class="text-danger" />
            <button type="submit" class="btn btn-primary save-btn-position">Save</button>
            </EditForm>
    </div>
    
}


<script>
    // Show image in popup
    function showImagePopup(imageUrl) {
        const popup = document.getElementById("popupRef");
        const popupImg = document.getElementById("popupImage");

        // Display the popup and set the image source
        popup.style.display = 'flex';
        popupImg.src = imageUrl;
    }

    // Close the popup
    function closeImagePopup() {
        const popup = document.getElementById("popupRef");
        popup.style.display = 'none';
    }

</script>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Rating? Rating { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }

    [SupplyParameterFromForm]
    private Listing? listing { get; set; }


    private int SellerId;
    private string imgSrc = ""; // Base64 string for image preview
    private string ratingMSG; //stars,, int to string
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        Rating ??= await context.Rating.FirstOrDefaultAsync(m => m.Id == Id);

        SellerId = Rating.UserId;

        User ??= await context.User.FirstOrDefaultAsync(u => u.Id == SellerId);

        var ListingId = Rating.ListingId;

        listing ??= await context.Listing.FirstOrDefaultAsync(u => u.Id == ListingId);

        imgSrc = listing.ListingImageUrl;
        ratingMSG = Rating.Stars.ToString("0.00");

        if (Rating is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRating()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Rating!).State = EntityState.Modified;

        try
        {
            Rating.DateUpdated = DateTime.Now;

            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RatingExists(Rating!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/ratings/User");
    }
    private async Task ShowImage(string imageUrl)
    {
        // Use JSInterop to display the popup and set the image source
        await JSRuntime.InvokeVoidAsync("showImagePopup", imageUrl);
    }

    private bool RatingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Rating.Any(e => e.Id == id);
    }
}
