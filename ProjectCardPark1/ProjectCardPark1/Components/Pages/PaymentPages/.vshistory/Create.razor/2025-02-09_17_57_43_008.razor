@page "/payments/create"
@using Microsoft.EntityFrameworkCore
@using ProjectCardPark1.Domain
@inject IDbContextFactory<ProjectCardPark1.Data.ProjectCardPark1Context> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ProjectCardPark1User> UserManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@attribute [Authorize(Roles = "User")]

<PageTitle>Create</PageTitle>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Payment" OnValidSubmit="AddPayment" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>

            <div class="mb-3">
                <label for="paymenttype" class="form-label">Payment Type:</label>
                <InputRadioGroup id="paymenttype" @bind-Value="Payment.PaymentType" class="form-control">
                    @foreach (var paymentType in PaymentTypes)
                    {
                        <InputRadio Value="@paymentType" /> @paymentType
                    }
                </InputRadioGroup>
                <ValidationMessage For="@(() => Payment.PaymentType)" class="text-danger" />
            </div>
        @if (Payment.PaymentType == "Credit Card"){
        <div class="mb-3">
            <label class="form-label">Credit Card :</label>
                <input class="form-control" type="text" maxlength="16" pattern="\d{1,16}" @bind="CreditCardNo" />
        </div>

        <div class="mb-3 input-group">
            <div>
                <label class="form-label">Expiry Date :</label>
                <input class="form-control" type="text" maxlength="4" pattern="\d{1,4}" />
            </div>
            <div>
                <label class="form-label">CCV :</label>
                <input class="form-control" type="text" maxlength="3" pattern="\d{1,3}" />
            </div>
        </div>
        <h2>Your total amount is $@TotalAmount</h2>

                <button type="submit" class="btn btn-primary">Pay</button>
            }
            else
            {
                <h2>Your total amount is $@TotalAmount</h2>
                <button type="submit" class="btn btn-primary">Pay</button>
                
            }
        </EditForm>
    </div>
</div>

@code {
    private List<string> PaymentTypes = new List<string>
    {
        "Credit Card",
        "Cash"
    };

    [SupplyParameterFromForm]
    private Payment Payment { get; set; } = new();

    [SupplyParameterFromForm]
    private Listing Listing { get; set; }

    [SupplyParameterFromForm]
    private User User { get; set; }

    [SupplyParameterFromQuery(Name = "userId")]
    public string seller_userid { get; set; }

    [SupplyParameterFromQuery(Name = "listingId")]
    public int seller_ListingId { get; set; }

    double TotalAmount;
    string Buyer_userId;
    int seller_Id;
    public string CreditCardNo { get; set; }
    private bool _isInitialized = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        Buyer_userId = UserManager.GetUserId(claimsPrincipal);

        var context = DbFactory.CreateDbContext();

        Listing ??= await context.Listing.FirstOrDefaultAsync(a => a.CreatedBy == seller_userid);
        seller_Id = Listing.UserId;
        TotalAmount = Listing.Amount * Listing.Price;

        User ??= await context.User.FirstOrDefaultAsync(u => u.UserId == Buyer_userId);

        CreditCardNo = User.CreditCardNo;

        _isInitialized = true; // Mark initialization as complete

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _isInitialized)
        {
            if (CreditCardNo != null)
            {
                var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to use a different Card?");
                if (isConfirmed)
                {
                    CreditCardNo = "";
                    StateHasChanged(); // Trigger a re-render to reflect the updated value
                }
            }
        }
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPayment()
    {
        using var context = DbFactory.CreateDbContext();
        Payment.BuyerId = Buyer_userId;
        Payment.ListingId = seller_ListingId;
        Payment.UserId = seller_Id;
        Payment.CreatedBy = Buyer_userId;
        Payment.UpdatedBy = Buyer_userId;
        Payment.DateCreated = DateTime.Now;
        Payment.DateUpdated = DateTime.Now;
        context.Attach(Listing!).State = EntityState.Modified;
        Listing.Sold = true;
        context.Payment.Add(Payment);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/ratings/create?userId={seller_userid}&listingId={seller_ListingId}");
    }

}

